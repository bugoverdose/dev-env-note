1) git remote update   // 원격의 브랜치에 접근하기 위해 git remote를 갱신
// 원격의 브랜치를 찾지 못해서 발생하는 fatal: Cannot update paths and switch to branch 'feature/rename' at the same time. 라는 오류 메세지를 해결.

==============================================================
2) repo의 브랜치 정보 확인
> git branch : 로컬 브랜치들만 확인
> git branch -r : github에 등록된 브랜치들 확인 (remote)
> git branch -a : 로컬 + 원격 저장소의 모든 브랜치들 확인.

cf) q : 조회 후 나가기.

중요: 원격 저장소(Github)에는 여러 개의 branch가 있는 상황에서
      깃헙의 모든 내용을 clone/pull 받은 직후에는 master 브랜치 하나만 존재함.
      원격 저장소의 branch 정보들까지 디폴트로 찾아와지지 않음.

==============================================================
3) 깃헙에 등록된 특정 remote branch 가져오기 : -t 옵션

> git checkout -t [원격 저장소의 branch 이름] 
  : remotes/를 제외한 그 이후를 이름으로 설정
  : 원격 저장소의 branch를 가져오는 것과 동일한 기능을 한다.
  : 로컬의 동일한 이름의 branch를 생성하면서 해당 branch로 checkout을 한다.

[예시]
> git branch -a
* master
  remotes/origin/HEAD -> origin/master
  remotes/origin/feature/thread-image
  remotes/origin/master

> git checkout -t origin/feature/thread-image

> git branch -a
* feature/thread-image
  master
  remotes/origin/HEAD -> origin/master
  remotes/origin/feature/thread-image
  remotes/origin/master

==========================================
cf) branch명을 변경하여 가져오고 싶은 경우
> git checkout -b [생성할 branch 이름] [원격 저장소 branch의 현재 이름] 

==============================================================
3-1) remote branch 참고하기 
- 수정 내역을 원격 저장소에 push하지는 않지만 해당 branch를 로컬에 받아서 확인해보고 싶은 경우

> git checkout [원격 저장소의 branch 이름] 
- 아무런 옵션없이 원격 저장소의 branch를 checkout 하면 
  ‘detached HEAD’ 상태로 소스를 보고 변경해볼 수도 있지만 
  변경사항들은 commit, push 할 수 없으며 다른 branch로 checkout하면 사라짐.

==============================================================
4) 새로운 브랜치 생성 및 변경

git checkout -b feature/~~ 
git checkout master 

==============================================================
cf) 원격 브랜치 삭제
git push origin --delete 브랜치명 // 방법1

git branch -d 브랜치명            // 방법2. 삭제 후 origin에 반영
git push origin 브랜치명

==============================================================
5) master 브랜치에 merge된 커밋들 로컬에 반영 방법

> git remote update
> git pull origin master

충돌 사항 해결 후 커밋하여 충돌 해결

==============================================================
6) 로컬 브랜치명 수정 방법
> git checkout <old_name_branch>
> git branch -m <new_name_branch>

==============================================================
7) 원격 브랜치명 수정 방법
> git checkout <old_name_branch>
> git push origin -u <new_name_branch>        // 다른 이름으로 브랜치 복제
> git push origin --delete <old_name_branch>  // 기존 브랜치 삭제

==============================================================
8) 특정 브랜치에서의 작업물로 다른 브랜치 생성

> git checkout old_branch       // old_branch의 커밋 내역을 그대로 지닌
> git branch new_branch         // 새로운 브랜치 생성

> git checkout -b new_branch old_branch // 한줄로 실행

==============================================================